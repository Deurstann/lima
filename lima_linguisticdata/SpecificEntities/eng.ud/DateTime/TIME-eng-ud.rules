set encoding=utf8
using modex DateTime-modex.xml,Numex-modex.xml
using groups DateTime,Numex
set defaultAction=>CreateSpecificEntity()

#------------------------------ TIME ----------
use timekey.lst,timezone.lst

# several decompositions because several tokenizations possible
@AM_PM=(
am,a . m .,a . m.,a.m.,AM,A . M .,A . M.,A M,
pm,p . m .,p . m.,p.m.,PM,P . M .,P . M.,P M
)

# 08:43:08
t_integer<12::\: t_integer<60 (\: t_integer<60)? @AM_PM? @TimeZone?:TIME:

@Number=($NOMBRE)

# ten o'clock
t_integer::o'clock:TIME:
@Number::o'clock:TIME:

# half past ten
# ten to twelve
# twenty six minutes to twelve

t_integer:((t_integer|@Number) minutes|half|quarter) (past|to)::TIME:

@Number:((t_integer|@Number) minutes|half|quarter) (past|to)::TIME:

# seven thirty tomorrow
@Number:@Number?:@TimeKey:TIME:

t_integer:[at?]:@AM_PM @TimeZone?:TIME:

@Number:[at?]:@AM_PM @TimeZone?:TIME:

#------------------------------
# periods of time
# (maybe should be numbers with units)

# special case of ages -> TIME also ?

t_integer::[-?] (year-old|month-old):TIME:

t_integer::t_fraction? [-?] (years|months) old:TIME:

#@TimeUnit=(hour,hours,minute,minutes,mins,second,seconds,secs,
#day,days,night,nights,week,weeks,month,months,year,years,decade,decades,
#century,centuries)

#t_integer::t_fraction? [-?] @TimeUnit:TIME:

#t_dot_number::[-?] @TimeUnit:TIME:

#t_comma_number::[-?] @TimeUnit:TIME:

#@Number::[-?] @TimeUnit:TIME:
