set encoding=utf8
using modex Location-modex.xml
using modex DateTime-modex.xml
using modex Person-modex.xml
using groups Location
set defaultAction=>CreateSpecificEntity()

#----------------------------------------------------------------------
# loading of gazeteers
#----------------------------------------------------------------------

use cities.lst
use states.lst
use countries.lst
use regions.lst

# contextual rules
use locationKey.lst
use locationPre.lst
use streetKey.lst
use stateAbbrev.lst
use geoLocationKey.lst

@CityInd=(
village,
city,
town,
district,
Hill,
municipality,
capital,
prefect
)
#warning (ald) : exclusion : well,north,east,south,west,in

@CityIndPlur=(
villages,
cities,
towns,
municipalities,
capitals,
prefects,
provinces,
ports,
republics,
islands,
settlements,
states,
streets,
suburbs,
dioceses,
district)

#----------------------------------------------------------------------
# recognition of web adresses
#----------------------------------------------------------------------

@WebAddressesEndings=(com,org,net,fr,ch,co,uk,edu)

@fileExtension=(html,htm,jpg)

http::\: / / (* .){1-4} @WebAddressesEndings (/ ~? *){0-n} (/|/ * . @fileExtension)?:URL:

http::\: / / (* .){1-4} * (/ ~? *){0-n} (/|/ * . @fileExtension)?:URL:

www::. (* .){1-4} @WebAddressesEndings (/ ~? *){0-4} (/|/ * . @fileExtension)?:URL:

#----------------------------------------------------------------------
# recognition tel adresses
#----------------------------------------------------------------------

# telephone numbers are locations

T_Ni<999:\(:\) T_Ni<999 - T_Ni<9999:COORDINATE:

T_Ni<999::- T_Ni<999 - T_Ni<9999:COORDINATE:

1::- T_Ni<999 - T_Ni<999 - T_Ni<9999:COORDINATE:


#----------------------------------------------------------------------
# recognition of US adresses
# address means there is a zip code or a number with a street (kind and name)
#----------------------------------------------------------------------

# precise direction
# 12400 SW 152nd St.
# 3245 College Ave
# ( the T_Ni>1 trigger is a trick :
#   all T_Ni triggers must have less priority than T_Ni>1000<3000 triggers
#   (more specific) => must be placed after, or be a different trigger,
#   as specific )

@orientation=(N,S,E,W,NE,NW,SE,SW,N . E,N . W,S . E,S . W )

#12400 SW 152nd Avenue
#former rule => T_Ni>1::(@orientation .?)? *{1-2} @streetKey:LOCATION:
T_Ni>1::(@orientation .?)? (*{1-2}) @streetKey:ADDRESS:
=>AppendEntityFeature(trigger,"address-number")
=>AppendEntityFeature(right.1.1,"qualifier")
=>AppendEntityFeature(right.2,"name")
=>AppendEntityFeature(right.3,"kind")
=>NormalizeEntity()
=<ClearEntityFeatures()
# =>todo : Unable to catch the name (right 2) with the former regex. 
# Very strange regex to cath 152nd ! 


T_Ni>1::(@StateAbbrev|US|U.S.) (-?) (T_Ni<999):ADDRESS:
=>SetEntityFeature(right.3,"zip-code")
=>NormalizeEntity()
=<ClearEntityFeatures()
#Aux États-Unis, le code postal est le code ZIP. Comprenant 5 chiffres, il se place à la fin d'une ligne commençant par le nom de la ville, précédé du nom ou du sigle de l’État :

## zip codes : five digits
## FL 33301
@StateAbbrev::T_Ni>9999<99999:ADDRESS:
=>SetEntityFeature(right,"zip-code")
=>NormalizeEntity()
=<ClearEntityFeatures()
#=>SetEntityFeature(trigger,"name")

## P.O. Box
Box:(PO|P.O.|po)?:T_Ni:ADDRESS:
=>AppendEntityFeature(left,,"po-box")
=>AppendEntityFeature(trigger,"po-box")
=>AppendEntityFeature(right,"po-box")
=<ClearEntityFeatures()
=>NormalizeEntity()

## Mile Markers
#Jeremy said there's an access road just past mile marker 6.
mile::marker (T_Ni|T_Nd):COORDINATE:
=>SetEntityFeature(trigger,"kind")
=>AppendEntityFeature(right.1,"kind")
=<ClearEntityFeatures()
=>NormalizeEntity()

#----------------------------------------------------------------------
# recognition of other adresss/location (ODO)
#    = incomplete address = street without number or zip code
# use streetKey
#----------------------------------------------------------------------
@Capitalized=(t_capital_1st,t_capital)
#Nothing beats an espresso in Place Vendome.
Place::Vendome:ODO:
=>SetEntityFeature(trigger.1,"kind")
=>SetEntityFeature(right.1,"name")
=<ClearEntityFeatures()

#The bedrooms overlook Sloane Square
# For years we lived on Beekman Place
@streetKey:[@locationPre?] (@Capitalized{1-3})::ODO:
=>AppendEntityFeature(trigger,"kind")
=>AppendEntityFeature(left.1,"name")
=>AppendEntityFeature(left.2,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()

#For years we lived on Beekman Place.
Place:@Capitalized?:(@Capitalized|of the Vosges|of the Bastille)?:ODO:
=>AppendEntityFeature(trigger,"kind")
=>AppendEntityFeature(left,"name")
=>AppendEntityFeature(right.1,"name")
=>AppendEntityFeature(right.2,"name")
=>AppendEntityFeature(right.3,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()

# Park is not in @streetKey
# TODO: add it? or change the rule to obtain GEO
Park:@Capitalized{1-3}::ODO:
=>SetEntityFeature(trigger,"kind")
=>AppendEntityFeature(left,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()
#=> loc odo

#----------------------------------------------------------------------
# recognition of steets and highways
#----------------------------------------------------------------------
## highway names

#Interstate 40
interstate::T_Ni<99:ODO:
=>SetEntityFeature(trigger,"kind")
=>SetEntityFeature(right,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()
#=>SetEntityFeature(right.1,"name")

Interstate::T_Ni<99:ODO:
=>SetEntityFeature(trigger,"kind")
=>SetEntityFeature(right,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()
#=>SetEntityFeature(right.1,"name")


#=>SetEntityFeature(trigger,right,"name")
#=> loc odo ? 

#convention : A10=name
I::(-) (T_Ni<99):ODO:
=>AppendEntityFeature(trigger,"name")
=>AppendEntityFeature(right.1,"name")
=>AppendEntityFeature(right.2,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()
#=> loc odo ?  - 24/02 - cela ne marche toujours pas.  

#----------------------------------------------------------------------
# To be placed with recognition of US adresses???
#----------------------------------------------------------------------

@StateAbbrev::-? T_Ni<999:ADDRESS:
=>SetEntityFeature(right.2,"zip-code")
=<ClearEntityFeatures()
=>NormalizeEntity()
#=> loc odo ?

@StateAbbrev:[,]:.?:ODO:
=>SetEntityFeature(trigger,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()

US::-? T_Ni<999:ADDRESS:
=>SetEntityFeature(right.2,"zip-code")
=<ClearEntityFeatures()
=>NormalizeEntity()
#=> loc odo 


#----------------------------------
U.S.::-? T_Ni<999:ADDRESS:
=>SetEntityFeature(right,"zip-code")
=<ClearEntityFeatures()
=>NormalizeEntity()
#todo je ne sais pas =>SetEntityFeature(trigger,right.2,"name")
#=> loc odo ?

#----------------------------------------------------------------------
# Geopolitical entities (loc.admin)
#----------------------------------------------------------------------
########################### CITY ##############################################

# Must exist in cities.lst
# Palm:West:Beach:LOCATION:West Palm Beach
# =>AppendEntityFeature(left,"name")
# =>AppendEntityFeature(trigger,"name")
# =>AppendEntityFeature(right,"name")
# =>NormalizeEntity()
# =<ClearEntityFeatures()

# Palm Beach does exists in cities.lst
# "West Palm Beach" exists in list of cities
# "Palm Beach" exists in list of Region
# TODO: filter out list of Region names of cities?
# how to avoid this case?
# change order of ruls: countries, then cities, then region?
# Palm::Beach:CITY:
# =>AppendEntityFeature(trigger,"name")
# =>AppendEntityFeature(right,"name")
# =>NormalizeEntity()
# =<ClearEntityFeatures()

# repérage avec annonceur et gazetteer
# contre example: Manchester City!!
@City::(city|City|CITY):CITY:
=>AppendEntityFeature(trigger,"name")
=>SetEntityFeature(right,"kind")
=<ClearEntityFeatures()
=>NormalizeEntity()

# repérage avec annonceur et gazetteer
# city of Bombay
@CityInd::of @City:CITY:
=>SetEntityFeature(trigger,"kind")
=>AppendEntityFeature(right.2,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()

# repérage avec gazetteer seulement
# West Palm Beach
@City:::CITY:
=>AppendEntityFeature(trigger,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()

# repérage avec annonceur sans gazetteer
# city of Huuiit
# the city of Peterborough
@CityInd::of t_capital_1st{1-2}:CITY:
=>SetEntityFeature(trigger,"kind")
=>AppendEntityFeature(right.2,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()

# repérage avec annonceur sans gazetteer, villes quartiers...
# Lenin Hill
# Greenwitch Village
# Manchester City (dommage!)
@CityInd:t_capital_1st{1-2}::CITY:
=>SetEntityFeature(trigger,"kind")
=>AppendEntityFeature(left,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()

########################### Region ##############################################

@RegionKey=(Region,region,state,State)

# repérage avec gazetteer et annonceur
# state of Arkansas
@State:@RegionKey of::REGION:
=>AppendEntityFeature(trigger,"name")
=>SetEntityFeature(left.1,"kind")
=<ClearEntityFeatures()
=>NormalizeEntity()

# Alabama state
@Region::@RegionKey:REGION:
=>AppendEntityFeature(trigger,"name")
=>AppendEntityFeature(right,"kind")
=<ClearEntityFeatures()
=>NormalizeEntity()

# repérage avec gazetteer seulement
# Alabama
@Region:::REGION:
=>AppendEntityFeature(trigger,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()

########################### Pays ##############################################

# repérage avec gazetteer seulement
# France
@Country:::COUNTRY:
=>AppendEntityFeature(trigger,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()


#Republic::of @Capitalized:COUNTRY:
#=>SetEntityFeature(right.2,"name")
#=<ClearEntityFeatures()
#=>NormalizeEntity()
#=> loc loc.adm.nat

###################### Geographical and Buildings ########################################

Wall::Street:NOT_LOCATION:

# TODO: church, annonceur organisation
# Church is not in @streetKey
# TODO: add it? or change the rule to obtain ORG
# Evangelical Lutheran Church in Canada Act 317.
Church:@Capitalized{1-5}::NOT_LOCATION:


#Cap::(de @Capitalized|d\'):LOCATION:
# Cap Canaveral, Cap Cod
Cap::@Capitalized:GEO:
=>SetEntityFeature(trigger,"kind")
=>SetEntityFeature(right,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()

# southern Afghanistan

@GeographicalPrecision=(
South,West,East,
Southern,Western,Northern,Eastern,
Southwest, Northwest, Southeast, Northeast,
Southwestern, Northwestern, Southeastern, Northeastern
)

## general contextual location rule

## $NP:@locationPre?:(@locationKey|@streetKey):LOCATION:
## @Capitalized=(t_capital_1st,T_Amh,$NP)

#todo : que se passe-t-il avec cette regle ?
# Eastern David Chernasky Canyon
#@Capitalized:@locationPre? (@Capitalized){0-2}:@locationKey:LOCATION:
#=>SetEntityFeature(trigger,"name")
#=>SetEntityFeature(left.2,trigger,"name")
#=>SetEntityFeature(right,"kind")
#=<ClearEntityFeatures()
#=>NormalizeEntity()
#=> loc phys ?

#todo = a priori probleme avec ?
#Jeremy Martinson
#455 Larkspur Dr.
#California Springs, CA 92926-4601
#@Capitalized:@locationPre? (@Capitalized){0-2}:@streetKey:LOCATION:
#=<ClearEntityFeatures()
#=>NormalizeEntity()
#=>SetEntityFeature(trigger.1,"name")
#=>SetEntityFeature(right,"kind")
#=>AppendEntityFeature(left.2,"name")
#=>SetEntityFeature(left.1,"todo")
#=> loc odo

# Charles River, Nappa Valley
@geoLocationKey:@locationPre? @Capitalized{1-2}::GEO:
=>SetEntityFeature(trigger,"kind")
=>SetEntityFeature(left.1,"modifier")
=>AppendEntityFeature(left.2,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()


#todo _ je ne sais pas
#@Capitalized::[,] [@StateAbbrev]:LOCATION:
#=>SetEntityFeature(trigger,"name")
#=<ClearEntityFeatures()
#=>NormalizeEntity()
#=> loc ????


#todo y reflechir ....
#@locationPre::(@City|@State|@CountryOrRegion):LOCATION:
#=>SetEntityFeature(right,"name")
#=<ClearEntityFeatures()
#=>NormalizeEntity()

#[@CityIndPlur]::[of] t_capital_1st{1-3} [and] t_capital_1st{1-3}:LOCATION:
@CityIndPlur::of (t_capital_1st{1-3}) and (t_capital_1st{1-3}):LOCATION:
=>SetEntityFeature(trigger,"kind")
=>AppendEntityFeature(right.2,"name1")
=>AppendEntityFeature(right.4,"name2")
=<ClearEntityFeatures()
=>NormalizeEntity()
#todo - celui la ne passe pas !!!!! 

#@CityIndPlur::of t_capital_1st{1-3} [and] t_capital_1st{1-3}:LOCATION:
#=>SetEntityFeature(trigger,"kind")
#=>SetEntityFeature(right.4,"name_2")
#=<ClearEntityFeatures()
#=>NormalizeEntity()

include ../Person/firstname.lst

@nearKey=(
in,
by,
close\ to,
)

near::@Capitalized{1-3} [@nearKey] [@Capitalized{1-3}]:GEO:
=>AppendEntityFeature(trigger,"modifier")
=>AppendEntityFeature(right.1,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()

#same rule than the previous rule. 
near::@Capitalized{1-3} [@nearKey] [@Capitalized{1-3}]:GEO:
=>AppendEntityFeature(right.3,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()
# todo : error : unable to define two names with the same attribute !!

near::@Capitalized{1-3}:GEO:
=>AppendEntityFeature(right,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()
#todo : error : unable to catch a name with 2/3 tokens

# redundancies
# Arkansas state
# Exeter city
@State::(state|State|STATE):REGION:
=>AppendEntityFeature(trigger,"name")
=>SetEntityFeature(right,"kind")
=<ClearEntityFeatures()
=>NormalizeEntity()


#----------------------------------------------------------------------
# recognition miscelanous location (planets?)
#----------------------------------------------------------------------
use miscLocations.lst

@miscLocation:::GEO:
=>SetEntityFeature(trigger,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()

#----------------------------------------------------------------------
# indirect recognition location with verbs??
#----------------------------------------------------------------------
@locationVerbs=(
come,
came,
travel,
travelling,
traveling,
go,
went,
emigrate,
emigrates,
landed,
trip,
have been,
has been,
had been
)

[@locationVerbs]::[(to|in|from|across)] (@Capitalized{1-3}):GEO:
=>AppendEntityFeature(right.2,"name")
=<ClearEntityFeatures()
=>NormalizeEntity()

