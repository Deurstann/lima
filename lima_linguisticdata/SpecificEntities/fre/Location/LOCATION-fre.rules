set encoding=utf8
using modex Location-modex.xml,Numex-modex.xml,DateTime-modex.xml
using groups Location
set defaultAction=>CreateSpecificEntity()

#----------------------------------------------------------------------
# loading of gazeteers
#----------------------------------------------------------------------
use regions.lst
use countries.lst
use cities.lst
use riversAndSeas.lst
use miscLocations.lst
use highways.lst
use annonceurLieu.lst
use greeklocations.lst
use annonceurVille.lst
use annonceurVoie.lst
use annonceurGeo.lst
use annonceurFact.lst

include wd_locations.rules

@aqua=(ru$NC,ruisselet,ruisseau,rivière$NC,fleuve$NC,torrent,rigole$NC,ravine$NC,oued,étang$NC,marais$NC,mare$NC,lac$NC,mer$NC,océan$NC,canal,canaux,chenal,fontaine$NC,puit$NC,Mer)
# removed source$NC: too ambiguous
#add Mer (in uppercase) to @aqua because Mer is identifed as $NP.

@mountain=(massif\ central,Pyrénées,Alpes,massif Armoricain,Vosges,Jura,Atlas,Chaînes\ d\'Ougarta);

@PrecisionGeographique=(sud,nord,est,ouest,sud-est,nord-est,sud-ouest,nord-ouest)

@locationVerbs=(
ressentir$V,
ressenti$ADJ,
secouer$V,
produire$V,
trembler$V,
survenir$V,
frapper$V,
enregistrer$V,	
avoir\ lieu$V,	
trouver$V,	
toucher$V,	
situer$V,	
localiser$V,	
ébranler$V,	
détecter$V)

# TODO: comment remettre les lemmes de rue et place ou supprimer les entrées avec un espace (route départementale)
# @Street=(rue$NC,route,chemin,avenue,voie,impasse,venelle,autoroute,nationale,départementale,route nationale,route départementale,route communale,place$NC)
@StreetAdj=(nationale,communale,departementale,départementale)
@StreetNC=(rue$NC,place$NC)
@StreetInAddress=(rue$NC,place$NC,Rue,Place,rue,place,
route,Route,chemin,Chemin,avenue,Avenue,boulevard,Boulevard,voie,Voie,
impasse,Impasse,quai,Quai,venelle,Venelle,Cours)

#Quartier present dans la convention Quaero 
# pas de liste ???

@AnnonceurLieu::(t_alphanumeric):NOT_LOCATION: 

#******************************************************************************
# les voies
#la nationale 118.
T_Ni::@Street? @StreetAdj:LOCATION:
=>NormalizeEntity()
=<ClearEntityFeatures()

#A10
#AT_Ni>1::(autoroute)?:LOCATION:
#=>NormalizeEntity()
#=<ClearEntityFeatures()

#la n118
#nT_Ni>1::(autoroute)?:LOCATION:
#=>NormalizeEntity()
#=<ClearEntityFeatures()

#le triangle de Rocquencourt
triangle::de Rocquencourt:LOCATION:
=>NormalizeEntity()
=<ClearEntityFeatures()

#place de la république
#@Street::@StreetAdj $NC{1-3}:LOCATION:
#=>NormalizeEntity()
#=<ClearEntityFeatures()

#place de la république
#@Street::$NC{1-3}:LOCATION:
#=>NormalizeEntity()
#=<ClearEntityFeatures()

#place de la république
@Street::@StreetAdj? ,? (de la|de|du|des|à|aux)? ($NP|t_capital_1st){1-3}:LOCATION:
=>NormalizeEntity()
=<ClearEntityFeatures()

#idem avec le déclencheur sur rue ou place
@StreetNC::,? (de la|de|du|des|à|aux)? ($NP|t_capital_1st){1-3}:LOCATION:
=>NormalizeEntity()
=<ClearEntityFeatures()

#******************************************************************************
# les adresses
#

# code postal (en france) = 5 chiffres: vérifie la longueur, pas la valeur (peut commencer par 0)

# autorise det et prep dans les noms de rues, mais pas en fin
@LocPart=(t_capital,t_capital_1st,$NP,$DET,$PREP)
# autoriser $NC en fin permet de récupérer des formes sans majuscule ("rue du commerce")
# mais peut apporter aussi du bruit...
# autorise dates (rue du 8 mai 1945)
@LocPartFinal=(t_capital,t_capital_1st,$NP,<DateTime.DATE>)
@bis=(bis,ter)

# complement: Zone Industrielle, résidence, bâtiment etc.
@zone=(zone$NC industriel$ADJ,zone$NC $PREP activité$NC,ZI,ZA,ZAC,résidence$NC)
@bat=(bâtiment$NC,immeuble$NC,Immeuble)
@letter=(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z)

define subautomaton AddressComplement {
   pattern=(@zone) @LocPart{0-2} @LocPartFinal (@bat (t_integer|letter|@LocPart{0-2} @LocPartFinal))?
}

# CHAMBON FEUGEROLLES (42500), 9 rue Jean Monnet
# code postal comme trigger
t_integer:@LocPartFinal{1-3} \(?:\) ,? (%AddressComplement ,?)? t_integer @bis? ,? (@StreetInAddress) @LocPart{0-2} @LocPartFinal (,? %AddressComplement)?:LOCATION:
+LengthInInterval(trigger,"5,5")
=>NormalizeEntity()
=<ClearEntityFeatures()

# 71 Avenue des Ternes, 75017 PARIS
# duplicate the rule to ensure that the city name does not combine several cases (upper/lower)
t_integer::@bis? ,? (@StreetInAddress) @LocPart{0-3} @LocPartFinal (,? %AddressComplement)? (,|—|-)? (t_integer|<Numex.NUMBER>) t_capital{1-4} ((CEDEX|Cedex|Cédex) t_integer)?:LOCATION:
+LengthInInterval(right.8,"5,5")
=>NormalizeEntity()
=<ClearEntityFeatures()

t_integer::@bis? ,? (@StreetInAddress) @LocPart{0-3} @LocPartFinal (,? %AddressComplement)? ((,|—|-)? (t_integer|<Numex.NUMBER>) @LocPart? t_capital_1st{1-2})? ((CEDEX|Cedex|Cédex) t_integer)?:LOCATION:
+LengthInInterval(right.7.2,"5,5")
=>NormalizeEntity()
=<ClearEntityFeatures()
#+LengthInInterval(right.7.2,"5,5")

t_integer::,? @StreetInAddress *{1-3} (escalier (T_Ni>1|A|B|C|D|E|F|G))? ((batiment|bâtiment|résidence|bat|bat\.) (t_capital_1st{1-3}|T_Ni>1|A|B|C|D|E|F|G))?:LOCATION:
=>NormalizeEntity()
=<ClearEntityFeatures()


#la voie est annotée avec loc.odo.


T_Ni>1::(@Cities) (@Countries)?:LOCATION:
=>NormalizeEntity()
=<ClearEntityFeatures()

#******************************************************************************
#lieux physiques aquatiques 

#mer d'Iroise, mer de tranquilité (Lune), mare au diable, etc.
#@aqua::(de la|du|des|d'|au|à|aux)? (@RiversAndSeas|$NP|$NC|t_capital_1st):LOCATION:
@aqua::(de la|du|des|d'|au|à|aux)? (@RiversAndSeas|$NP|$NC|t_capital_1st):LOCATION:
=>NormalizeEntity()
=<ClearEntityFeatures()

@RiversAndSeas:::LOCATION:
=>NormalizeEntity()
=<ClearEntityFeatures()

#*****************************************************************************

Trévaresse:::LOCATION:
#chaine de collines

#Salon:::LOCATION:
# regle dangeureuse ??

Maison:(la|La)?:Blanche:LOCATION:
=>NormalizeEntity()
=<ClearEntityFeatures()

rose:[(la)?] ville::LOCATION:Toulouse :
=>NormalizeEntity()
=<ClearEntityFeatures()

Elysée:::LOCATION:Élysée
=>NormalizeEntity()
=<ClearEntityFeatures()

Élysée:::LOCATION:
=>NormalizeEntity()
=<ClearEntityFeatures()

@Countries::((du|de l\'|d') @PrecisionGeographique|central$ADJ|profond$ADJ|subsaharien$ADJ):LOCATION:
=>NormalizeEntity()
=<ClearEntityFeatures()
#1.1 + 1.2 => du sud. 

@Regions::((du|de l\') @PrecisionGeographique|central$ADJ|profond$ADJ|subsaharien$ADJ)):LOCATION:
=>NormalizeEntity()
=<ClearEntityFeatures()
#loc.adm.reg

#à 3 km à l'est de la ville de Paris.
#annotation IMM : <amount> <val> 100 </val> <unit> kilomètres </unit> </amount> <loc.adm.reg> <qualifier> à l' ouest </qualifier> de <loc.adm.town> <name> Bagdad </name> </loc.adm.town> </loc.adm.reg> 
@PrecisionGeographique:[((km|kms|kilometre|kilometres|kilomètre|kilomètres|kilimétrer)?] (au|à l\')?):(de|des|du|d'|de $DET) ($DET? @AnnonceurLieu (de|des|du|d'|de $DET)?)? (@Regions|@Countries|@Cities|$NP|t_capital_1st):LOCATION:
=>NormalizeEntity()
=<ClearEntityFeatures()

# loc.adm.reg
#loc phys
# est = dist (imm guide - p7) 
@AnnonceurLieu::$ADJ? (de|des|du|d'|de $DET)? (@Regions|@Countries|@Cities|$NP|t_capital_1st|t_capital_small):LOCATION: 
=>NormalizeEntity()
=<ClearEntityFeatures()

[ville$NC]::[($ADJ)?] [(de|du|d'|de $DET)] (@Regions|@Countries|@Cities|$NP):LOCATION:
=>NormalizeEntity()
=<ClearEntityFeatures()
#si ville loc.adm.town

@Cities:::LOCATION:
=>NormalizeEntity()
=<ClearEntityFeatures()
#loc.adm.town

@Regions:::LOCATION:
=>NormalizeEntity()
=<ClearEntityFeatures()

@Greeklocations:::LOCATION:
=>NormalizeEntity()
=<ClearEntityFeatures()

@Countries:::LOCATION:
=>NormalizeEntity()
=<ClearEntityFeatures()

##Ajout le 25/07
#[@locationVerbs]::[(à|au|le|l'|la|en|dans|entre)?] (t_capital_1st) (et?) (en?) (t_capital_1st)?:LOCATION:
#=>NormalizeEntity()
#=<ClearEntityFeatures()
#todo ajouter =>SetEntityFeature(right.5,"name") - todo cette regle ne passe pas ! 

#[@locationVerbs]::[(à|au|en|dans)] (@Regions|@Countries|@Cities|t_capital_1st):#LOCATION: 
#=>NormalizeEntity()
#=<ClearEntityFeatures()

#[@locationVerbs]::[(à|au|en|dans|vers|en direction de|près de|à coté de|proche de|au @PrecisionGeographique de)? (un|une|le[la|les)?] $NP:LOCATION:
#=>NormalizeEntity()
#=<ClearEntityFeatures()

[habiter$V]::[(à|au|en|dans|vers|en direction de|près de|à coté de|au @PrecisionGeographique de)? (un|une|le|la|les|l')?] $NP:LOCATION:
#=>NormalizeEntity()
#=<ClearEntityFeatures()
#NP -> noun phrase. j'habite la rue, dans une grotte, vers la superette. 


# le Nord
# (je ne peux pas me permettre d\'étiqueter "est" tout seul)
# => la plupart des occurrences de Nord, Sud-Est etc ne sont pas étiquetées
#@PrecisionGeographique::(du pays)?:LOCATION:


#----------------------------------------------------------------------
# recognition of web adresses and ip adresses
#----------------------------------------------------------------------
36-15::$NC:COORDINATE:
=>NormalizeEntity()
=<ClearEntityFeatures()

t_url:::URL:
=>NormalizeEntity()
=<ClearEntityFeatures()

#----------------------------------------------------------------------
# recognition radio fm
#----------------------------------------------------------------------

#Radio Bleue sur 98.8 MHz . en conflit avec NUMEX qui capte le sequence <NUMBER> <UNIT>
MHz:t_dot_number::COORDINATE:
=>AppendEntityFeature(left,"name")
=>AppendEntityFeature(trigger,"name")
=>SetEntityFeature("location_type","FM Radio")
=>NormalizeEntity()
=<ClearEntityFeatures()

#@leguidedannotation
# \@::(*):COORDINATE:
# =>SetEntityFeature(trigger,"name")
# =>AppendEntityFeature(right,"name")
# =>NormalizeEntity()
# =<ClearEntityFeatures()

#----------------------------------------------------------------------
# recognition telephone numbers
#----------------------------------------------------------------------
#01 69 85 80 02
#t_integer>0<99:t_integer>0<9: t_integer>0<99 t_integer>0<99 t_integer>0<99:COORDINATE:
#=>AppendEntityFeature(left,"name")
#=>AppendEntityFeature(trigger,"name")
#=>AppendEntityFeature(right,"name")
#=>SetEntityFeature("location_type","phone number")
#=>NormalizeEntity()
#=<ClearEntityFeatures()

#01-69-85-80-02
t_integer>0<99:t_integer>0<9 -:- t_integer>0<99 - t_integer>0<99 - t_integer>0<99:COORDINATE:
=>AppendEntityFeature(left,"name")
=>AppendEntityFeature(trigger,"name")
=>AppendEntityFeature(right,"name")
=>NormalizeEntity()
=<ClearEntityFeatures()

#+33 1 23 45 67 89
#+33::t_integer>0<9 t_integer>0<99 t_integer>0<99 t_integer>0<99 t_integer>0<99:COORDINATE:
#=>SetEntityFeature(trigger,"name")
#=>AppendEntityFeature(right,"name")
#=>SetEntityFeature("location_type","phone number")
#=>NormalizeEntity()
#=<ClearEntityFeatures()

#+33.1.23.45.67.89
#+33::t_integer>0<9 \. t_integer>0<99 \. t_integer>0<99 \. t_integer>0<99 \. t_integer>0<99:COORDINATE:
#=>SetEntityFeature(trigger,"name")
#=>AppendEntityFeature(right,"name")
#=>SetEntityFeature("location_type","phone number")
#=>NormalizeEntity()
#=<ClearEntityFeatures()



#mon identifiant skype est jean.dupont
#todo => car LIMA perd les espaces.


